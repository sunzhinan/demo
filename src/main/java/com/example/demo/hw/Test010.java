package com.example.demo.hw;

import java.util.ArrayList;

/**
 * 服务器连接方式包括直接相连，间接连接。A 和 B 直接连接，B 和 C 直接连接，则 A 和 C 间接连接。直接连接和间接连接都可以发送广播。
 *
 * 给出一个 N*N 数组，代表 N 个服务器，matrix[i][j]==1，则代表 i 和 j 直接连接；
 * 不等于 1 时，代表 i 和 j 不直接连接。
 * matrix[i][i]==1，即自己和自己直接连接。matrix[i][j]==matrix[j][i]。
 * 计算初始需要给几台服务器广播，才可以使每个服务器都收到广播
 * ------------------------------------------------------------------------------
 * 示例1：
 * 输入：
 * 1 0 0
 * 0 1 0
 * 0 0 1
 * 输出：
 * 3
 * 说明： 3台服务器互不连接，所以需要分别广播这3台服务器
 *-------------------------------------------------------------------------------
 * 示例2：
 * 输入：
 * 1 1
 * 1 1
 * 输出：
 * 1
 * 说明：2台服务器相互连接，所以只需要广播其中一台服务器
 */
public class Test010 {
    public static int fun(int k[][]){

        /**
         * 思路，
         * 第一轮比较：01，02，03~0n
         * 第二轮比较：12，13，14~1n
         * 第三轮比较：23，24，25~2n
         * 以此类推
         * 第n-1轮比较：n(n-1)
         *
         * 那么只要去掉重复的关系，即可得到广播数字
         *
         */

        int n = k.length;
        int m = 0;
        ArrayList<Integer> list ;
        for (int i = 0; i < n-1; i++) {
            list = new ArrayList();
            for (int j = i+1; j < n; j++) {
                if(k[i][j] == 1){
                    list.add(j);
                    m++;
                }
            }

            // 去重
            if(list.size() > 1){
                for (int p = 0; p < list.size()-1; p++) {
                    for (int o = p+1; o < list.size(); o++) {
                        if(k[list.get(p)][list.get(o)] == 1){
                            k[list.get(p)][list.get(o)] =0;
                        }
                    }
                }
            }
        }
        return n - m;
    }

    public static void main(String[] args) {
//        int k[][] = new int[3][3];
//        k[0][0] = 1;
//        k[0][1] = 0;
//        k[0][2] = 0;
//
//        k[1][0] = 0;
//        k[1][1] = 1;
//        k[1][2] = 0;
//
//        k[2][0] = 0;
//        k[2][1] = 0;
//        k[2][2] = 1;

        int k[][] = new int[5][5];
        k[0][0] = 1;
        k[0][1] = 0;
        k[0][2] = 1;
        k[0][3] = 0;
        k[0][4] = 1;

        k[1][0] = 0;
        k[1][1] = 1;
        k[1][2] = 0;
        k[1][3] = 0;
        k[1][4] = 0;

        k[2][0] = 1;
        k[2][1] = 0;
        k[2][2] = 1;
        k[2][3] = 0;
        k[2][4] = 1;

        k[3][0] = 0;
        k[3][1] = 0;
        k[3][2] = 0;
        k[3][3] = 1;
        k[3][4] = 0;

        k[4][0] = 1;
        k[4][1] = 0;
        k[4][2] = 1;
        k[4][3] = 0;
        k[4][4] = 1;


        System.out.println(fun(k));
    }
}
